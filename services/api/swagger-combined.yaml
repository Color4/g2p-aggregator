swagger: '2.0'
info:
  version: 0.4.0
  title: GA4GH G2P & Beacon API specification
  description: >-
      This protocol defines the associations between genotype
      and phenotype (G2P).  Associations can be made as a
      result of literature curation, computational modeling,
      inference, etc., and modeled and shared using this schema.
  contact: {}
host: "g2p-ohsu.ddns.net"
basePath: /
schemes:
  - http
  - https
paths:
  /beacon:
    get:
      tags:
      - "Beacon"
      description: Get information about Beacon
      operationId: getBeacon
      produces:
        - application/json
      responses:
        '200':
          description: OK / Call is successful
          schema:
            items:
              $ref: '#/definitions/Beacon'
  /beacon/query:
    get:
      tags:
      - "Beacon"
      description: Get response to a Beacon query for allele information.
      operationId: getBeaconAlleleResponse
      produces:
        - application/json
      parameters:
        - name: referenceName
          description: 'Reference name (chromosome). Accepting values 1-22, X, Y.'
          in: query
          required: true
          type: string
          enum:
            - '1'
            - '2'
            - '3'
            - '4'
            - '5'
            - '6'
            - '7'
            - '8'
            - '9'
            - '10'
            - '11'
            - '12'
            - '13'
            - '14'
            - '15'
            - '16'
            - '17'
            - '18'
            - '19'
            - '20'
            - '21'
            - '22'
            - 'X'
            - 'Y'
        - name: start
          description: |
            Precise start coordinate position, allele locus (0-based).
            * start only:
              - for single positions, e.g. the start of a specified sequence alteration where the size is given through the specified alternateBases
              - typical use are queries for SNV and small InDels
              - the use of "start" without an "end" parameter requires the use of "referenceBases"
            * start and end:
              - special use case for exactly determined structural changes
            * startMin + startMax + endMin + endMax
              - for querying imprecise positions (e.g. identifying all structural variants starting anywhere between startMin <-> startMax, and ending anywhere between endMin <-> endMax
              - single or douple sided precise matches can be achieved by setting startMin = startMax XOR endMin = endMax
          in: query
          required: true
          type: integer
          format: int64
          minimum: 0
        - name: startMin
          description: 'Minimum start coordinate'
          type: string
          in: query
        - name: startMax
          description: 'Maximum start coordinate'
          type: string
          in: query
        - name: end
          description: 'Precise end coordinate'
          type: string
          in: query
        - name: endMin
          description: 'Minimum end coordinate'
          type: string
          in: query
        - name: endMax
          description: 'Maximum end coordinate'
          type: string
          in: query
        - name: referenceBases
          description: |
            Reference bases for this variant (starting from `start`).
            For accepted values see the REF field in VCF 4.2 specification.
          in: query
          required: true
          type: string
          enum:
            - A
            - C
            - G
            - T
            - N
        - name: alternateBases
          description: |
            The bases that appear instead of the reference bases.
            For accepted values see the ALT field in VCF 4.2 specification.
          in: query
          required: true
          type: string
        - name: assemblyId
          description: 'Assembly identifier (GRC notation, e.g. GRCh37).'
          in: query
          required: true
          type: string
        - name: datasetIds
          description: >-
            Identifiers of datasets, as defined in "BeaconDataset". If this field is null/not specified, all datasets should be queried.
          in: query
          required: false
          type: array
          items:
            type: string
          collectionFormat: multi
        - name: includeDatasetResponses
          description: |
            Indicator of whether responses for individual datasets (datasetAlleleResponses) should be included in the response (BeaconAlleleResponse) to this request or not.
            If null (not specified), the default value of NONE is assumed.
          in: query
          required: false
          type: string
          enum:
            - ALL
            - HIT
            - MISS
            - NONE
      responses:
        '200':
          description: OK / Call is successful
          schema:
            items:
              $ref: '#/definitions/BeaconAlleleResponse'
        '400':
          description: Bad request (e.g. missing mandatory parameter)
          schema:
            $ref: '#/definitions/BeaconAlleleResponse'

        '401':
          description: Unauthorised (e.g. when an unauthenticated user tries to access a protected resource)
          schema:
            $ref: '#/definitions/BeaconAlleleResponse'
        '403':
          description: Forbidden (e.g. the resource is protected for all users or the user is authenticated but s/he is not granted for this resource)
          schema:
            $ref: '#/definitions/BeaconAlleleResponse'
    post:
      tags:
      - "Beacon"
      description: Gets response to a beacon query for allele information.
      operationId: postBeaconAlleleResponse
      produces:
        - application/json
      parameters:
        - name: queryBeaconAllele
          in: body
          required: true
          schema:
            $ref: '#/definitions/BeaconAlleleRequest'
      responses:
        '200':
          description: OK / Call is successful
          schema:
            items:
              $ref: '#/definitions/BeaconAlleleResponse'
        '400':
          description: Bad request (e.g. missing mandatory parameter)
          schema:
            $ref: '#/definitions/BeaconAlleleResponse'

        '401':
          description: Unauthorised (e.g. when an unauthenticated user tries to access a protected resource)
          schema:
            $ref: '#/definitions/BeaconAlleleResponse'
        '403':
          description: Forbidden (e.g. the resource is protected for all users or the user is authenticated but s/he is not granted for this resource)
          schema:
            $ref: '#/definitions/BeaconAlleleResponse'
  /associations:
    get:
      tags:
      - "Associations"
      summary: "Get the list of Associations"
      description: "Search for evidence"
      operationId: "searchAssociations"
      parameters:
      - name: "size"
        in: "query"
        required: false
        type: "integer"
        description: "Size of the page to retrieve."
        x-example: 10
      - name: "from"
        in: "query"
        required: false
        type: "integer"
        description: "The offset from the first result you want to fetch."
        x-example: 1
      - name: "q"
        in: "query"
        required: false
        type: "string"
        description: "lucene query string"
        x-example: "BRCA1  +association.evidence_label:A"
      - name: "sort"
        in: "query"
        required: false
        type: "string"
        description: "Sorting to perform. Can either be in the form of fieldName, or fieldName:asc/fieldName:desc."
        # x-example: "genes:asc"
        # x-example: "association.evidence_label:desc"
      responses:
        200:
          description: "Status 200"
        400:
          description: "Status 400"
          schema:
            $ref: "#/definitions/Error"
  /associations/{id}:
    get:
      tags:
      - "Associations"
      summary: "Load an individual Association"
      description: "Loads a Association"
      operationId: "getAssociation"
      parameters: []
      responses:
        200:
          description: "Status 200"
        400:
          description: "Status 400"
          schema:
            $ref: "#/definitions/Error"
    parameters:
    - name: "id"
      in: "path"
      required: true
      type: "string"
      description: "Identifier of the Association"
      x-example: "0e8dd830-ad98-11e6-bf2e-47644ada7c0f"
  /associations/terms:
    get:
      tags:
      - "Associations"
      summary: "Get top N terms in field"
      description: "Return the top N terms of <field> that match query"
      operationId: "associationTerms"
      parameters:
      - name: "size"
        in: "query"
        required: false
        type: "integer"
        description: "How many terms should be returned out of the overall terms list."
        x-example: 10
      - name: "q"
        in: "query"
        required: false
        type: "string"
        description: "lucene query string"
        x-example: "BRCA1  +association.evidence_label:A"
      - name: "f"
        in: "query"
        required: true
        type: "string"
        description: "Field name "
        x-example: "association.evidence_label"
        x-example: "genes"
        x-example: "features.name"
      responses:
        200:
          description: "Status 200"
          schema:
            $ref: "#/definitions/Terms"
        400:
          description: "Status 400"
          schema:
            $ref: "#/definitions/Error"
  /features/associations:
    post:
      tags:
      - "Associations"
      description: Performs a set of feature queries
      operationId: postFeatureAssociations
      produces:
        - application/json
      parameters:
        - name: queryFeatures
          in: body
          required: true
          schema:
            $ref: '#/definitions/FeatureQueriesRequest'
      responses:
        '200':
          description: OK / Call is successful
        '400':
          description: Bad request (e.g. missing mandatory parameter)
        '401':
          description: Unauthorised (e.g. when an unauthenticated user tries to access a protected resource)
        '403':
          description: Forbidden (e.g. the resource is protected for all users or the user is authenticated but s/he is not granted for this resource)


definitions:
  Terms:
    type: object
    properties:
      terms:
        type: object
        properties:
          buckets:
            type: array
            items:
              type: object
              properties:
                doc_count:
                  type: integer
                key:
                  type: string
          doc_count_error_upper_bound:
            type: integer
          sum_other_doc_count:
            type: integer

  Beacon:
    type: object
    required:
      - id
      - name
      - apiVersion
      - organization
      - datasets
    properties:
      id:
        type: string
        description: Unique identifier of the beacon. Use reverse domain name notation.
        example: org.ga4gh.beacon
      name:
        type: string
        description: Name of the beacon.
      apiVersion:
        type: string
        description: Version of the API provided by the beacon.
        example: v0.3
      organization:
        $ref: "#/definitions/BeaconOrganization"
      description:
        type: string
        description: Description of the beacon.
      version:
        type: string
        description: Version of the beacon.
        example: v0.1
      welcomeUrl:
        type: string
        description: URL to the welcome page for this beacon (RFC 3986 format).
        example: http://example.org/wiki/Main_Page
      alternativeUrl:
        type: string
        description: Alternative URL to the API, e.g. a restricted version of this beacon (RFC 3986 format).
        example: http://example.org/wiki/Main_Page
      createDateTime:
        type: string
        description: The time the beacon was created (ISO 8601 format).
        example: 2012-07-19 or 2017-01-17T20:33:40Z
      updateDateTime:
        type: string
        description: The time the beacon was created (ISO 8601 format).
        example: 2012-07-19 or 2017-01-17T20:33:40Z
      datasets:
        description: Datasets served by the beacon. Any beacon should specify at least one dataset.
        type: array
        items:
          $ref: "#/definitions/BeaconDataset"
      sampleAlleleRequests:
        description: Examples of interesting queries, e.g. a few queries demonstrating different esponses.
        type: array
        items:
          $ref: "#/definitions/BeaconAlleleRequest"
      info:
        description: Additional structured metadata, key-value pairs.
        type: array
        items:
          $ref: "#/definitions/KeyValuePair"
  BeaconAlleleRequest:
    description: 'Allele request as interpreted by the beacon.'
    type: object
    required:
      - referenceName
      - start
      - startMin
      - startMax
      - endMin
      - endMax
      - referenceBases
      - alternateBases
      - assemblyId
    properties:
      referenceName:
        description: 'Reference name (chromosome). Accepting values 1-22, X, Y.'
        type: string
        enum:
          - '1'
          - '2'
          - '3'
          - '4'
          - '5'
          - '6'
          - '7'
          - '8'
          - '9'
          - '10'
          - '11'
          - '12'
          - '13'
          - '14'
          - '15'
          - '16'
          - '17'
          - '18'
          - '19'
          - '20'
          - '21'
          - '22'
          - 'X'
          - 'Y'
      start:
        description: 'Position, allele locus (0-based)'
        type: integer
        format: int64
        minimum: 0
      end:
        type: integer
      startMin:
        type: integer
      startMax:
        type: integer
      endMin:
        type: integer
      endMax:
        type: integer
      referenceBases:
        description: >-
          Reference bases for this variant (starting from `start`). For accepted values see the REF field in VCF 4.2 specification
        type: string
        enum:
          - A
          - C
          - G
          - T
          - N
      alternateBases:
        description: >-
          The bases that appear instead of the reference bases. For accepted values see the ALT field in VCF 4.2 specification
        type: string
      assemblyId:
        description: 'Assembly identifier (GRC notation, e.g. `GRCh37`).'
        type: string
        example: GRCh38
      datasetIds:
        description: >-
          Identifiers of datasets, as defined in `BeaconDataset`. If this field is null/not specified, all datasets should be queried.
        type: array
        items:
          type: string
      includeDatasetResponses:
        description: >-
          Indicator of whether responses for individual datasets
          (datasetAlleleResponses) should be included in the
          response (BeaconAlleleResponse) to this request or not.
          If null (not specified), the default value of NONE is assumed.
        type: string
        enum:
          - ALL
          - HIT
          - MISS
          - NONE
  BeaconAlleleResponse:
    type: object
    required:
      - beaconId
    properties:
      beaconId:
        description: 'Identifier of the beacon, as defined in `Beacon`.'
        type: string
      apiVersion:
        description: 'Version of the API. If specified, the value must match `apiVersion` in Beacon'
        type: string
      exists:
        description: >-
          Indicator of whether the given allele was observed in any of the datasets queried. This should be non-null, unless there was an error, in which case `error` has to be non-null.
        type: boolean
      alleleRequest:
        $ref: "#/definitions/BeaconAlleleRequest"
      datasetAlleleResponses:
        description: 'Indicator of whether the given allele was  observed in individual datasets. This should be non-null if `includeDatasetResponses` in the corresponding `BeaconAlleleRequest` is true, and null otherwise.'
        type: array
        items:
          $ref: "#/definitions/BeaconDatasetAlleleResponse"
      error:
        $ref: '#/definitions/BeaconError'
  BeaconOrganization:
    description: Organization owning the beacon.
    type: object
    required:
      - id
      - name
    properties:
      id:
        type: string
        description: 'Unique identifier of the organization.'
      name:
        type: string
        description: 'Name of the organization.'
      description:
        type: string
        description: 'Description of the organization.'
      address:
        type: string
        description: 'Address of the organization.'
      welcomeUrl:
        type: string
        description: 'URL of the website of the organization (RFC 3986 format).'
      contactUrl:
        type: string
        description: 'URL with the contact for the beacon operator/maintainer, e.g. link to a contact form (RFC 3986 format) or an email (RFC 2368 format).'
      logoUrl:
        type: string
        description: 'URL to the logo (PNG/JPG format) of the organization (RFC 3986 format).'
      info:
        description: Additional structured metadata, key-value pairs.
        type: array
        items:
          $ref: "#/definitions/KeyValuePair"
  BeaconDataset:
    type: object
    required:
      - id
      - name
      - assemblyId
      - createDateTime
      - updateDateTime
    properties:
      id:
        type: string
        description: 'Unique identifier of the dataset.'
      name:
        type: string
        description: 'Name of the dataset.'
      assemblyId:
        description: 'Assembly identifier (GRC notation, e.g. `GRCh37`).'
        type: string
        example: GRCh38
      createDateTime:
        type: string
        description: 'The time the dataset was created (ISO 8601 format).'
        example: 2012-07-29 or 2017-01-17T20:33:40Z
      updateDateTime:
        type: string
        description: 'The time the dataset was created (ISO 8601 format).'
        example: 2012-07-19 or 2017-01-17T20:33:40Z
      version:
        type: string
        description: 'Version of the dataset.'
      variantCount:
        type: integer
        format: int64
        description: 'Total number of variants in the dataset.'
        minimum: 0
      callCount:
        type: integer
        format: int64
        description: 'Total number of calls in the dataset.'
        minimum: 0
      sampleCount:
        type: integer
        format: int64
        description: 'Total number of samples in the dataset.'
        minimum: 0
      externalUrl:
        type: string
        description: 'URL to an external system providing more dataset information (RFC 3986 format).'
        example: http://example.org/wiki/Main_Page
      info:
        description: Additional structured metadata, key-value pairs.
        type: array
        items:
          $ref: "#/definitions/KeyValuePair"
      dataUseConditions:
        $ref: "#/definitions/DataUseConditions"
  BeaconDatasetAlleleResponse:
    type: object
    required:
      - datasetId
    properties:
      datasetId:
        type: string
        description: 'not provided'
      exists:
        description: >-
          Indicator of whether the given allele was observed in the dataset. This should be non-null, unless there was an error, in which case `error` has to be non-null.
        type: boolean
      error:
        $ref: '#/definitions/BeaconError'
      frequency:
        type: number
        description: 'Frequency of this allele in the dataset. Between 0 and 1, inclusive.'
        minimum: 0
        maximum: 1
      variantCount:
        type: integer
        format: int64
        description: 'Number of variants matching the allele request in the dataset.'
        minimum: 0
      callCount:
        type: integer
        format: int64
        description: 'Number of calls matching the allele request in the dataset.'
        minimum: 0
      sampleCount:
        type: integer
        format: int64
        description: 'Number of samples matching the allele request in the dataset'
        minimum: 0
      note:
        type: string
        description: 'Additional note or description of the response.'
      externalUrl:
        type: string
        description: 'URL to an external system, such as a secured beacon or a system providing more information about a given allele (RFC 3986 format).'
      info:
        description: 'Additional structured metadata, key-value pairs.'
        type: array
        items:
          $ref: "#/definitions/KeyValuePair"
  BeaconError:
    description: >-
      Beacon-specific error. This should be non-null in exceptional situations only, in which case `exists` has to be null.
    type: object
    required:
      - errorCode
    properties:
      errorCode:
        type: integer
        format: int32
      errorMessage:
        type: string
  KeyValuePair:
    type: object
    required:
      - key
      - value
    properties:
      key:
        type: string
      value:
        type: string
  DataUseConditions:
    type: object
    required:
      - consentCodeDataUse
    description: Data use conditions ruling this dataset.
    properties:
      consentCodeDataUse:
        $ref: "#/definitions/ConsentCodeDataUse"
  ConsentCodeDataUseConditionPrimary:
    type: object
    required:
      - code
      - description
    properties:
      code:
        type: string
        description: |
          Primary data use categories:
          * NRES: no restrictions - No restrictions on data use.
          * GRU(CC): general research use and clinical care - For health/medical/biomedical purposes and other biological research, including the study of population origins or ancestry.
          * HMB(CC): health/medical/biomedical research and clinical care - Use of the data is limited to health/medical/biomedical purposes, does not include the study of population origins or ancestry.
          * DS-[XX](CC): disease-specific research and clinical care - Use of the data must be related to [disease].
          * POA: population origins/ancestry research - Use of the data is limited to the study of population origins or ancestry.
        enum:
          - NRES
          - GRU
          - HMB
          - DS
          - POA
      description:
        type: string
        description: Description of the condition.
  ConsentCodeDataUseConditionSecondary:
    type: object
    required:
      - code
      - description
    properties:
      code:
        type: string
        description: |
          Secondary data use categories:
          * RS-[XX]: other research-specific restrictions - Use of the data is limited to studies of [research type] (e.g., pediatric research).
          * RUO: research use only - Use of data is limited to research purposes (e.g., does not include its use in clinical care).
          * NMDS: no “general methods” research - Use of the data includes methods development research (e.g., development of software or algorithms) ONLY within the bounds of other data use limitations.
          * GSO: genetic studies only - Use of the data is limited to genetic studies only (i.e., no research using only the phenotype data).
        enum:
          - RS
          - RUO
          - NMDS
          - GSO
      description:
        type: string
        description: Description of the condition.
  ConsentCodeDataUseConditionRequirement:
    type: object
    required:
      - code
      - description
    properties:
      code:
        type: string
        description: |
          Data use requirements:
          * NPU: not-for-profit use only - Use of the data is limited to not-for-profit organizations.
          * PUB: publication required - Requestor agrees to make results of studies using the data available to the larger scientific community.
          * COL-[XX]: collaboration required - Requestor must agree to collaboration with the primary study investigator(s).
          * RTN: return data to database/resource - Requestor must return derived/enriched data to the database/resource.
          * IRB: ethics approval required - Requestor must provide documentation of local IRB/REC approval.
          * GS-[XX]: geographical restrictions - Use of the data is limited to within [geographic region].
          * MOR-[XX]: publication moratorium/embargo - Requestor agrees not to publish results of studies until [date].
          * TS-[XX]: time limits on use - Use of data is approved for [x months].
          * US: user-specific restrictions - Use of data is limited to use by approved users.
          * PS: project-specific restrictions - Use of data is limited to use within an approved project.
          * IS: institution-specific restrictions - Use of data is limited to use within an approved institution.
        enum:
          - NPU
          - PUB
          - COL
          - RTN
          - IRB
          - GS
          - MOR
          - TS
          - US
          - PS
          - IS
      description:
        type: string
        description: Description of the condition.
  ConsentCodeDataUse:
    type: object
    required:
      - primaryCategory
      - secondaryCategories
      - requirements
      - version
    properties:
      primaryCategory:
        $ref: "#/definitions/ConsentCodeDataUseConditionPrimary"
      secondaryCategories:
        type: array
        items:
          $ref: "#/definitions/ConsentCodeDataUseConditionSecondary"
      requirements:
        type: array
        items:
          $ref: "#/definitions/ConsentCodeDataUseConditionRequirement"
      version:
        type: string
        description: Version of the data use specification.
        example: v0.1
  Error:
    type: "object"
    required:
    - "code"
    properties:
      code:
        type: "integer"
        minimum: 400
        maximum: 599
      description:
        type: "string"
        example: "Bad query parameter [size]: Invalid integer value [abc]"
      reasonPhrase:
        type: "string"
        example: "Bad Request"
    description: "This general error structure is used throughout this API."
    example: "{\n  \"code\": 400,\n  \"description\": \"Bad query parameter [size]:\
      \ Invalid integer value [abc]\",\n  \"reasonPhrase\": \"Bad Request\"\n}"

  FeatureQueriesRequest:
    description: 'Lookup evidence for this set of alleles'
    type: array
    items:
      $ref: '#/definitions/Feature'

  Feature:
    type: object
    properties:
      - name: referenceName
        description: 'Reference name (chromosome). Accepting values 1-22, X, Y.'
        in: query
        required: true
        type: string
        enum:
          - '1'
          - '2'
          - '3'
          - '4'
          - '5'
          - '6'
          - '7'
          - '8'
          - '9'
          - '10'
          - '11'
          - '12'
          - '13'
          - '14'
          - '15'
          - '16'
          - '17'
          - '18'
          - '19'
          - '20'
          - '21'
          - '22'
          - 'X'
          - 'Y'
      - name: start
        description: |
          Precise start coordinate position, allele locus (0-based).
        required: true
        type: integer
        format: int64
        minimum: 0
      - name: end
        description: 'Precise end coordinate'
        type: integer
        format: int64
      - name: referenceBases
        description: |
          Reference bases for this variant (starting from `start`).
          For accepted values see the REF field in VCF 4.2 specification.
        type: string
        enum:
          - A
          - C
          - G
          - T
          - N
      - name: alternateBases
        description: |
          The bases that appear instead of the reference bases.
          For accepted values see the ALT field in VCF 4.2 specification.
        type: string
      - name: assemblyId
        description: 'Assembly identifier (GRC notation, e.g. GRCh37).'
        in: query
        required: true
        type: string
