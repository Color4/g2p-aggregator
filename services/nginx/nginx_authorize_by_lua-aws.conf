# Generate passwords:
#
#     $ printf "nobody:$(openssl passwd -crypt nobody)\n" >> passwords
#     $ printf "all:$(openssl passwd -crypt all)\n"       >> passwords
#     $ printf "user:$(openssl passwd -crypt user)\n"     >> passwords
#     $ printf "admin:$(openssl passwd -crypt admin)\n"   >> passwords
#
# Install the Nginx with Lua support ("openresty"):
#
#     $ wget http://openresty.org/download/ngx_openresty-1.4.3.9.tar.gz
#     $ tar xf ngx_openresty-*
#     $ cd ngx_openresty-*
#     $
#     $ ./configure --with-luajit
#     $ # ./configure --with-luajit --with-cc-opt="-I/usr/local/include" --with-ld-opt="-L/usr/local/lib" # Mac OS X w/ Homebrew
#     $ make && make install
#
# More information: http://openresty.org/#Installation
#
# See the Lua source code in `authorize.lua`
#
# Run:
#
#     $ /usr/local/openresty/nginx/sbin/nginx -p $PWD/nginx/ -c $PWD/nginx_authorize_by_lua.conf

worker_processes  1;

error_log logs/lua.log notice;

events {
  worker_connections 1024;
}

http {

  # redirect users to https
  server {
    listen                          80;
    server_name                     g2p-test.ddns.net;  # change this to your host
    location / {
      return 301                      https://$server_name$request_uri;
    }
  }

  # all access via https
  server {
    listen                          443 ssl;
    server_name                     g2p-test.ddns.net; # change this to your host
    # certs
    ssl_certificate                 /certs/fullchain.pem;
    ssl_certificate_key             /certs/privkey.pem;


    # basic authentication for all access
    # auth_basic           "Protected Resource";
    # auth_basic_user_file .htpasswd;
    # authorization code
    access_by_lua_file  conf/authorize.lua;

    # exact match, no url. send to static page
    location = / {
       rewrite ^ /g2p last;
     }

     # asked for static page
    #location /g2p {
    #   rewrite ^ /kibana last;
    # }

    # static pages served from /var/www
    location /static-html {
     root /var/www;
    }

    # administration
    location /admin {
      # basic authentication for all access
      auth_basic           "admin";
      auth_basic_user_file .htpasswd;
      error_page 404 = @admin;
    }
    location @admin {
      rewrite  ^ /g2p last;
    }

    # asked for kibana
    location /kibana {
      # return 302                              https://g2p-test.ddns.net/_plugin/kibana/app/kibana#/dashboard/9e921030-37aa-11e7-b744-3f569d1a1d0c;
      return 302                              https://g2p-test.ddns.net/g2p#/dashboard/9e921030-37aa-11e7-b744-3f569d1a1d0c;
    }


    # asked for dashboard
    location /g2p {
       rewrite ^ /static-html/g2p.html last;
    }

    # asked for beacon
    location /ga4gh/ {
      proxy_pass                              http://beacon:5000/;
      proxy_buffering                         off;
      proxy_pass_request_headers              on;
      proxy_set_header Authorization          "";
      proxy_set_header Host                   $http_host;
      proxy_set_header X-Real-IP              $remote_addr;
      proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto      $scheme;
    }

    # asked for elastic search
    location / {
      proxy_pass                              https://search-g2p-test-yudbv4cp57vymf3hugql5hgcs4.us-west-2.es.amazonaws.com;
      proxy_buffering                         off;
      proxy_pass_request_headers              on;
      proxy_set_header Authorization          "";
      proxy_set_header Host                   $http_host;
      proxy_set_header X-Real-IP              $remote_addr;
      proxy_set_header X-Forwarded-For        $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto      $scheme;
    }

  }

}
